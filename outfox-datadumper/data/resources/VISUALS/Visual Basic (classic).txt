The original Visual Basic (also referred to as Classic Visual Basic) is a third-generation event-driven programming language from Microsoft known for its Component Object Model (COM) programming model first released in 1991 and declared legacy during 2008. Microsoft intended Visual Basic to be relatively easy to learn and use. Visual Basic was derived from BASIC and enables the rapid application development (RAD) of graphical user interface (GUI) applications, access to databases using Data Access Objects, Remote Data Objects, or ActiveX Data Objects, and creation of ActiveX controls and objects.
A programmer can create an application using the components provided by the Visual Basic program itself. Over time the community of programmers developed third-party components. Programs written in Visual Basic can also make use of the Windows API, which requires external functions declarations.
The final release was version 6 in 1998. On April 8, 2008, Microsoft stopped supporting Visual Basic 6.0 IDE. The Microsoft Visual Basic team still maintains compatibility for Visual Basic 6.0 applications through its "It Just Works" program on supported Windows operating systems.In 2014, some software developers still preferred Visual Basic 6.0 over its successor, Visual Basic .NET.  Visual Basic 6.0 was selected as the most dreaded programming language by respondents of Stack Overflow's annual developer survey in 2016, 2017, and 2018.A dialect of Visual Basic, Visual Basic for Applications (VBA), is used as a macro or scripting language within several Microsoft and ISV applications, including Microsoft Office.


== Language features ==
Like the BASIC programming language, Visual Basic was designed to have an easy learning curve. Programmers can create both simple and complex GUI applications. 
Programming in VB is a combination of visually arranging components or controls on a form, specifying attributes and actions for those components, and writing additional lines of code for more functionality. Since VB defines default attributes and actions for the components, a programmer can develop a simple program without writing much code. Programs built with earlier versions suffered performance problems, but faster computers and native code compilation has made this less of an issue. Though VB programs can be compiled into native code executables from version 5 on, they still require the presence of around 1 MB of runtime libraries. Core runtime libraries are included by default in Windows 2000 and later, but extended runtime components still have to be installed. Earlier versions of Windows (95/98/NT), require that the runtime libraries be distributed with the executable.

Forms are created using drag-and-drop techniques.  A tool is used to place controls (e.g., text boxes, buttons, etc.) on the form (window).  Controls have attributes and event handlers associated with them.  Default values are provided when the control is created, but may be changed by the programmer.  Many attribute values can be modified during run time based on user actions or changes in the environment, providing a dynamic application.  For example, code can be inserted into the form resize event handler to reposition a control so that it remains centered on the form, expands to fill up the form, etc.  By inserting code into the event handler for a keypress in a text box, the program can automatically translate the case of the text being entered, or even prevent certain characters from being inserted.
Visual Basic can create executables (EXE files), ActiveX controls, or DLL files, but is primarily used to develop Windows applications and to interface with database systems.  Dialog boxes with less functionality can be used to provide pop-up capabilities. Controls provide the basic functionality of the application, while programmers can insert additional logic within the appropriate event handlers. For example, a drop-down combination box automatically displays a list. When the user selects an element, an event handler is called that executes code that the programmer created to perform the action for that list item. Alternatively, a Visual Basic component can have no user interface, and instead provide ActiveX objects to other programs via Component Object Model (COM). This allows for server-side processing or an add-in module.
The runtime recovers unused memory using reference counting, which depends on variables passing out of scope or being set to Nothing, avoiding the problem of memory leaks that are possible in other languages. There is a large library of utility objects, and the language provides basic support for object-oriented programming. Unlike many other programming languages, Visual Basic is generally not case-sensitive—though it transforms keywords into a standard case configuration and forces the case of variable names to conform to the case of the entry in the symbol table. String comparisons are case sensitive by default. The Visual Basic compiler is shared with other Visual Studio languages (C, C++). Nevertheless, by default the restrictions in the IDE do not allow creation of some targets (Windows model DLLs) and threading models, but over the years, developers have bypassed these restrictions.


== Characteristics ==

Visual Basic builds upon the characteristics of BASIC.

Instead of being identified by line number alone, code may be grouped into named subroutines or methods: Sub...End Sub.  Visual Basic supports user-added line numbers through version 6, or later.
Code Statements have no terminating character other than a line ending (carriage return/line feed). Versions since at least VB 3.0 allowed that statements can be implicitly multi-line with concatenation of strings or explicitly using the underscore character (_) at the end of lines.
Code comments are done with a single apostrophe (') character, like: ' This is a comment.
Looping statement blocks begin and end with keywords: Do...Loop, While...End While, For...Next .
Multiple variable assignment is not possible. A = B = C does not imply that the values of A, B and C are equal. The Boolean result of "Is B = C?" is stored in A. The result stored in A would therefore be either false or true.
Boolean constant True has numeric value −1.  This is because the Boolean data type is stored as a two's complement signed integer. In this construct −1 evaluates to all-1s in binary (the Boolean value True), and 0 as all-0s (the Boolean value False). This is apparent when performing a (bitwise) Not operation on the two's complement value 0, which returns the two's complement value −1, in other words True = Not False. This inherent functionality becomes especially useful when performing logical operations on the individual bits of an integer such as And, Or, Xor and Not. This definition of True is also consistent with BASIC since the early 1970s Microsoft BASIC implementation and is also related to the characteristics of CPU instructions at the time.
Logical and bitwise operators are unified. This is unlike some C-derived languages (such as Perl), which have separate logical and bitwise operators. This again is a traditional feature of BASIC.
Variable array base.  Arrays are declared by specifying the upper and lower bounds in a way similar to Pascal and Fortran.  It is also possible to use the Option Base statement to set the default lower bound.  Use of the Option Base statement can lead to confusion when reading Visual Basic code and is best avoided by always explicitly specifying the lower bound of the array.  This lower bound is not limited to 0 or 1, because it can also be set by declaration.  In this way, both the lower and upper bounds are programmable.  In more subscript-limited languages, the lower bound of the array is not variable. This uncommon trait does exist in Visual Basic .NET but not in VBScript.OPTION BASE was introduced by ANSI, with the standard for ANSI Minimal BASIC in the late 1970s.Relatively strong integration with the Windows operating system and the Component Object Model. The native types for strings and arrays are the dedicated COM types, BSTR and SAFEARRAY.
Banker's rounding as the default behavior when converting real numbers to integers with the Round function.  ? Round(2.5, 0) gives 2, ? Round(3.5, 0) gives 4.
Integers are automatically promoted to reals in expressions that involve the normal division operator (/) so that division of one integer by another produces the intuitively correct result. VB provides a specific integer divide operator (\) that does truncate.
By default, if a variable has not been declared or if no type declaration character is specified, the variable is of type Variant. However this can be changed with Deftype statements such as DefInt, DefBool, DefVar, DefObj, DefStr. There are 12 Deftype statements in total offered by Visual Basic 6.0. The default type may be overridden for a specific declaration by using a special suffix character on the variable name (# for Double, ! for Single, & for Long, % for Integer, $ for String, and @ for Currency) or using the key phrase As (type). VB can also be set in a mode that only explicitly declared variables can be used with the command Option Explicit.


== History ==

Visual Basic 1.0 was introduced in 1991. The drag and drop design for creating the user interface is derived from a prototype form generator developed by Alan Cooper and his company called Tripod. Microsoft contracted with Cooper and his associates to develop Tripod into a programmable form system for Windows 3.0, under the code name Ruby (no relation to the later Ruby programming language). Tripod did not include a programming language at all. Microsoft decided to combine Ruby with the Basic language to create Visual Basic. The Ruby interface generator provided the "visual" part of Visual Basic, and this was combined with the "EB" Embedded BASIC engine designed for Microsoft's abandoned "Omega" database system. Ruby also provided the ability to load dynamic link libraries containing additional controls (then called "gizmos"), which later became the VBX interface.


=== Timeline ===


==== 1990s ====
Project 'basic Thunder' was initiated in 1990.  Thunder persisted through to the last release of Visual Basic in the name of the primary internal function, "ThunderRTMain".
Visual Basic 1.0 (May 1991) was released for Windows at the Comdex/Windows World trade show in Atlanta, Georgia.
Visual Basic 1.0 for DOS was released in September 1992. The language itself was not quite compatible with Visual Basic for Windows, as it was the next version of Microsoft's DOS-based BASIC compilers, QuickBASIC and BASIC Professional Development System. The interface used a text-based user interface, using extended ASCII characters to simulate the appearance of a GUI.
Visual Basic 2.0 was released in November 1992. The programming environment was easier to use, and its speed was improved. Notably, forms became instantiable objects, thus laying the foundational concepts of class modules as were later offered in VB4.
Visual Basic 3.0 was released in the summer of 1993 and came in Standard and Professional versions. VB3 included version 1.1 of the Microsoft Jet Database Engine that could read and write Jet (or Access) 1.x databases.
Visual Basic 4.0 (August 1995) was the first version that could create 32-bit as well as 16-bit Windows programs. It has three editions; Standard, Professional, and Enterprise. It also introduced the ability to write non-GUI classes in Visual Basic. With VB4 the language was separated from the GUI library, and made available as VBA, in which form it was embedded with the Office 95 suite. To ease migration of Office macros and scripts, features from WordBasic, Excel Basic and Access Basic were incorporated into the language. Incompatibilities between different releases of VB4 caused installation and operation problems. While previous versions of Visual Basic had used VBX controls, Visual Basic now used OLE controls (with files names ending in .OCX) instead. These were later to be named ActiveX controls.
With version 5.0 (February 1997), Microsoft released Visual Basic exclusively for 32-bit versions of Windows. Programmers who preferred to write 16-bit programs were able to import programs written in Visual Basic 4.0 to Visual Basic 5.0, and Visual Basic 5.0 programs can easily be converted to Visual Basic 4.0.  Visual Basic 5.0 also introduced the ability to create custom user controls, as well as the ability to compile to native Windows executable code, speeding up calculation-intensive code execution.  A free, downloadable Control Creation Edition was also released for creation of ActiveX controls. It was also used as an introductory form of Visual Basic: a regular .exe project could be created and run in the IDE, but not compiled.
Visual Basic 6.0 (Mid-1998) improved in a number of areas including the ability to create web-based applications.


==== 2000s ====
Visual Basic 6.0 extended support ended in March 2008; however, primary components of the Visual Basic 6 development environment run in all 32-bit versions of Windows up to and including Windows 10.
Mainstream Support for Microsoft Visual Basic 6.0 ended on March 31, 2005. Extended support ended in March 2008.


== Derivative languages ==
Microsoft has developed derivatives of Visual Basic for use in scripting.  Visual Basic itself is derived heavily from BASIC, and subsequently has been replaced with a .NET platform version.
Some of the derived languages are:

Visual Basic for Applications (VBA) is included in many Microsoft applications (Microsoft Office), and also in many third-party products like SolidWorks, AutoCAD, WordPerfect Office 2002, ArcGIS, Sage 300 ERP, and Business Objects Desktop Intelligence. There are small inconsistencies in the way VBA is implemented in different applications, but it is largely the same language as Visual Basic 6.0 and uses the same runtime library. Visual Basic development ended with 6.0, but in 2010 Microsoft introduced VBA 7 to provide extended features and add 64-bit support.
VBScript is the default language for Active Server Pages.  It can be used in Windows scripting and client-side web page scripting. It resembles VB in syntax,  but is a separate language—executed by vbscript.dll instead of the VB runtime.  ASP and VBScript should not be confused with ASP.NET, which uses the .NET Framework for compiled web pages.
Visual Basic .NET is Microsoft's designated successor to Visual Basic 6.0, and is part of Microsoft's .NET platform. Visual Basic .NET compiles and runs using the .NET Framework. It is not backwards compatible with Visual Basic 6.0. An automated conversion tool exists, but fully automated conversion for most projects is impossible.
OpenOffice Basic is a Visual Basic compatible interpreter that originated in StarOffice office suite.
Gambas is a Visual Basic inspired free software programming language for the Linux operating system. It is not a clone of Visual Basic, but it does have the ability to convert Visual Basic programs to Gambas.
WinWrap Basic is a third-party VBA variant used with various software, and available for programmers to use to build a macro facility into their programs.
LotusScript is a VBA variant available in Lotus SmartSuite and Lotus Notes.
Later versions of Corel WordPerfect Office implement access to VBA as one of the macro/scripting languages, the other major ones being CorelScript and PerfectScript.
Earlier versions of Microsoft Word use a variant of Visual Basic called WordBasic.


== Performance and other issues ==
Earlier versions of Visual Basic (prior to version 5) compiled the code to P-Code only. The P-Code is interpreted by the language runtime. The benefits of P-Code include portability and smaller binary file sizes, but it usually slows down the execution, since having a runtime adds an additional layer of interpretation. Visual Basic applications require Microsoft Visual Basic runtime MSVBVMxx.DLL, where xx is the relevant version number, either 50 or 60. MSVBVM60.dll comes as standard with Windows in all editions from Windows 98 to Windows 10 (some editions of Windows 7 do not include it). A Windows 95 machine would however require inclusion with the installer of whichever DLL was needed by the program. Visual Basic 5 and 6 can compile code to either native or P-Code but in either case the runtime is still required for built in functions and forms management.
Criticisms levelled at Visual Basic editions prior to VB.NET include:
versioning problems associated with various runtime DLLs, known as "DLL hell"
poor support for object-oriented programming
can only create multi-threaded applications using ActiveX or DLL
variant types having a greater performance and storage "overhead" than strongly-typed programming languages
dependency on complex and fragile Component Object Model (COM) Registry entries


== Legacy development and support ==
All versions of the Visual Basic development environment from 1.0 to 6.0 were retired by Microsoft by 2008, and are therefore no longer supported.  The associated runtime environments are also unsupported, except for the Visual Basic 6 core runtime environment, which Microsoft officially supports for the lifetime of Windows 8, Windows 10 and Windows 11. Third party components that shipped with Visual Studio 6.0 are not included in this support statement.  Some legacy Visual Basic components may still work on newer platforms, despite being unsupported by Microsoft and other vendors. Documentation for Visual Basic 6.0, its application programming interface and tools is best covered in the last MSDN release before Visual Studio.NET 2002.  Later releases of MSDN focused on .NET development and had significant parts of the Visual Basic 6.0 programming documentation removed as the language evolved, and support for older code ended. Although vendor support for Visual Basic 6 has ended, and the product has never been supported on the latest versions of Windows, key parts of the environment still work on newer platforms.  It is possible to get a subset of the development environment working on 32-bit and 64-bit versions of Windows Vista, Windows 7, Windows 8, Windows 10 and Windows 11.


== Example code ==
The following code snippet displays a message box saying "Hello, World!" as the window loads:

This snippet makes a counter that moves up 1 every second (a label and a timer control need to be added to the form for this to work) until the form is closed or an integer overflow occurs:


== See also ==

IIf – a function in several editions of Visual Basic roughly equivalent to the ?: conditional operator of C and related languages.
Comparison of programming languages
Control array


== References ==


== External links ==
Visual Basic 6.0 Resource Center
Secure your Visual Basic 6.0 investment with Microsoft .NET: Migrating from Visual Basic 6.0 to Visual Basic 2008
Visual Basic 6 Renewed to Run on Windows 8
Instructions for installing Visual Basic 6 on a Windows 10 computer